<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Trip Incident Report">3dea441fdb1913003228f9151d9619bc</cat_item>
        <cat_variable>IO:d2845396dbba930002755f135e961961</cat_variable>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <messages/>
        <name>onLoad</name>
        <order>100</order>
        <script><![CDATA[function onLoad() {
	try{
		// ** Function Definitions **
		// Function to update the Trip code
		g_form.updateTripCode = function(){
			//g_form.setValue('trip_code',g_form.calculateTripCode());
			g_form.calculateTripCode();
		};
		// Function to calculate Trip code
		g_form.calculateTripCode = function(){
			var trip_code = '';
			try{
				var date_format = g_user_date_format;
				var train_number = g_form.getValue('train_number');
				var trip_depart = g_form.getValue('trip_depart');
				var trip_arrive = g_form.getValue('trip_arrive');
				if(date_format && train_number && trip_depart && trip_arrive){
					// 1. Check for date separator
					var sep = '/'; // Default date separator
					if(date_format.indexOf('.')>-1){
						// Use . as date separator
						sep = '.';
					}
					else if(trip_depart.indexOf('-')>-1){
						// Use - as date separator
						sep = '-';
					}
					// Check position order
					var pos_dd = 0;
					var pos_mm = 1;
					var pos_yy = 2;
					// Default: dd-mm-yy
					if(date_format.substring(0,2).toLowerCase()=='yy'){
						// yy-mm-dd
						pos_yy = 0; // Year first
						pos_dd = 2; // Day last
					}
					else if(date_format.substring(0,2).toLowerCase()=='mm'){
						// mm-dd-yy
						pos_mm = 0; // Month first
						pos_dd = 1; // Day second
					}
					// Get date values
					var trip_depart_short = trip_depart.split(sep)[pos_dd];
					var trip_arrive_short = trip_arrive.split(sep)[pos_dd];
					var month = trip_arrive.split(sep)[pos_mm];
					var year = trip_arrive.split(sep)[pos_yy];
					if(year.length==4){
						year = year.substring(2,4); // Convert to 2 digit year
					}
					// Combine Trip code values
					//If Train type is electric tilt train then trip code formay is : trainnnumber_departdate + month + year
					trip_code = g_form.getReference('train_type', checkTrainType);
					
					
					function checkTrainType(trainType){
						console.log('Callback TT : '+trainType.train_type);
						if(trainType.train_type.toString().toLowerCase() == 'electric tilt train') { 
							trip_code = train_number + '_' + trip_depart_short + month + '20' + year;
						} else {
							trip_code = train_number + '_' + trip_depart_short + trip_arrive_short + month + '20' + year;
						}
						g_form.setValue('trip_code', trip_code);
						return trip_code;
					}
					
				}
			}
			catch(err){
				console.log('Error in calculateTripCode() with details: '+err);
			}
			return trip_code;
		};
		// Function to retrieve available choice values from server for a given field
		g_form.getChoices = function(fieldName){
			try{
				var choicesArr = [];
				// Call server
				var gaTrainNumber = new GlideAjax('x_enps_ocs.TripReportUtils');
				gaTrainNumber.addParam('sysparm_name','getChoiceListAJAX');
				gaTrainNumber.addParam('table','x_enps_ocs_ptr');
				gaTrainNumber.addParam('element',fieldName);
				gaTrainNumber.getXML(function(response){
					if(response){
						var choicesArrJSON = response.responseXML.documentElement.getAttribute('answer');
						if(choicesArrJSON){
							choicesArr = JSON.parse(choicesArrJSON);
							g_form.choices[fieldName] = choicesArr;
						}
					}
				});
			}
			catch(err){
				console.log('Error in getChoices() with details: '+err);
			}
		};
		// Function to process choices for given field based on dependent field value
		g_form.processChoices = function(fieldName,dependentFieldName){
			try{
				var choiceArr = g_form.choices[fieldName];
				for(var choiceArrI=0; choiceArrI<choiceArr.length; choiceArrI++){
					var choice = choiceArr[choiceArrI];
					var dependentValue = g_form.getValue(dependentFieldName);
					if(dependentValue==choice.dependent_value){
						g_form.addOption(fieldName,choice.value,choice.label);
					}
				}
			}
			catch(err){
				console.log('Error in processChoices() with details: '+err);
			}
		};
		
		//Function to append the Train movement options to short description
		g_form.addShortDescription = function(selected, text){
			try{
				var shortDesc = g_form.getValue('short_description');

				// If checkbox selected and option not a added to short description, then add it
			    if(selected == 'true' && shortDesc.indexOf(text) == -1){
				   if(shortDesc == '')
					   shortDesc = text;
				   else 
					   shortDesc += ', ' + text;
			    }
				// If checkbox unselected and option present in the short description, then remove it
				else if(selected != 'true' && shortDesc.indexOf(text) != -1) {
					var re1 = new RegExp(text,"g");
					
					// First replace function removes the text and second replace function removes consecutive ", " (comma and space)
					shortDesc = shortDesc.replace(re1, '').replace(/(, )(?=\1)/gi, "");
					
					// Edge case if short description starts with ", " (comma and space) 
					if(shortDesc.startsWith(', '))
						shortDesc = shortDesc.substr(2);
					
					// Edge case if short description starts with ", " (comma and space) 
					if(shortDesc.endsWith(', '))
						shortDesc = shortDesc.slice(0, -2);
					
				}

				g_form.setValue('short_description', shortDesc);
			}
			catch(err) {
				console.log('Error in onLoad Client script addShortDescription : '+err);
			}
		};

		// ** onLoad Run Code **
		// Get choice values from server
		g_form.choices = {};
		g_form.getChoices('category');
		g_form.getChoices('subcategory');
		//g_form.getChoices('train_number');
		//g_form.getChoices('car_number');	
	}
	catch(err){
		console.log('Error in CS: onLoad');
	}
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>jake.g</sys_created_by>
        <sys_created_on>2018-06-25 00:01:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>cec75d5fdbf2170002755f135e961964</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>onLoad</sys_name>
        <sys_overrides/>
        <sys_package display_value="Onboard Customer Services" source="x_enps_ocs">fc5ff2c7db9513003228f9151d9619e2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Onboard Customer Services">fc5ff2c7db9513003228f9151d9619e2</sys_scope>
        <sys_update_name>catalog_script_client_cec75d5fdbf2170002755f135e961964</sys_update_name>
        <sys_updated_by>enable.zk</sys_updated_by>
        <sys_updated_on>2018-08-01 04:57:17</sys_updated_on>
        <table/>
        <type>onLoad</type>
        <ui_type>10</ui_type>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
